/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    exercises: Exercise;
    programs: Program;
    productUsers: ProductUser;
    exerciseCompletions: ExerciseCompletion;
    exports: Export;
    'payload-jobs': PayloadJob;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    exercises: ExercisesSelect<false> | ExercisesSelect<true>;
    programs: ProgramsSelect<false> | ProgramsSelect<true>;
    productUsers: ProductUsersSelect<false> | ProductUsersSelect<true>;
    exerciseCompletions: ExerciseCompletionsSelect<false> | ExerciseCompletionsSelect<true>;
    exports: ExportsSelect<false> | ExportsSelect<true>;
    'payload-jobs': PayloadJobsSelect<false> | PayloadJobsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: {
      createCollectionExport: TaskCreateCollectionExport;
      inline: {
        input: unknown;
        output: unknown;
      };
    };
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * Exercise definitions with progressive validation. Save as draft first, then publish when complete.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "exercises".
 */
export interface Exercise {
  id: string;
  /**
   * The name of the exercise. Can be saved as draft without this field, but required for publishing.
   */
  title?: string | null;
  /**
   * Detailed description of how to perform the exercise. Can be saved as draft without this field, but required for publishing.
   */
  description?: string | null;
  /**
   * YouTube URL or video ID for exercise demonstration. Can be saved as draft without this field, but required for publishing. Use YouTube URLs or video IDs.
   */
  videoUrl?: string | null;
  /**
   * Select exercises that can be used as alternatives to this exercise.
   */
  alternatives?: (string | Exercise)[] | null;
  /**
   * Check this box to make the exercise visible to product users. Only published exercises will be visible to product users. ⚠️ All required fields (title, description, video URL) must be filled before publishing.
   */
  isPublished?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Fitness programs with embedded milestones, days, and exercises. Save as draft first, then publish when complete.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "programs".
 */
export interface Program {
  id: string;
  /**
   * The name of the fitness program. Can be saved as draft without this field, but required for publishing.
   */
  name?: string | null;
  /**
   * A detailed description of what this program covers. Can be saved as draft without this field, but required for publishing.
   */
  description?: string | null;
  /**
   * The main goal or outcome of this program. Can be saved as draft without this field, but required for publishing.
   */
  objective?: string | null;
  /**
   * The milestones that make up this program, in order. Drag and drop to reorder milestones in the program sequence. At least one milestone is required for publishing.
   */
  milestones?:
    | {
        /**
         * The name of this milestone (e.g., "Foundation Phase", "Strength Building")
         */
        name?: string | null;
        /**
         * The theme or focus of this milestone (e.g., "Strength", "Endurance", "Technique")
         */
        theme?: string | null;
        /**
         * The specific goal or outcome for this milestone
         */
        objective?: string | null;
        /**
         * The days that make up this milestone, in order. Drag and drop to reorder days. Mix workout and rest days as needed.
         */
        days?:
          | {
              /**
               * Choose whether this is a workout day or rest day
               */
              dayType: 'workout' | 'rest';
              /**
               * Check if this is an AMRAP (As Many Rounds As Possible) day
               */
              isAmrap?: boolean | null;
              /**
               * Duration for AMRAP workout in minutes (e.g., 12 for 12-minute AMRAP)
               */
              amrapDuration?: number | null;
              /**
               * Exercises for this workout day. Only shown for workout days. Drag and drop to reorder exercises.
               */
              exercises?:
                | {
                    /**
                     * Select the exercise to perform
                     */
                    exercise: string | Exercise;
                    /**
                     * Number of sets to perform (1-20)
                     */
                    sets: number;
                    /**
                     * Number of repetitions per set (1-100)
                     */
                    reps: number;
                    /**
                     * Rest time between sets in seconds (0-600)
                     */
                    restPeriod?: number | null;
                    /**
                     * Weight to use for this exercise in pounds (0-1000)
                     */
                    weight?: number | null;
                    /**
                     * Duration amount for time-based exercises like planks, holds, or timed runs. Examples: 30 seconds for plank, 5 minutes for run, 1 hour for ruck march. Both value and unit must be specified together.
                     */
                    durationValue?: number | null;
                    /**
                     * Time unit for the duration value. Choose Seconds for short holds (planks, wall sits), Minutes for moderate activities (runs, bike rides), or Hours for long activities (ruck marches, hikes). Both value and unit must be specified together.
                     */
                    durationUnit?: ('seconds' | 'minutes' | 'hours') | null;
                    /**
                     * Distance amount for distance-based exercises like runs, walks, or bike rides. Examples: 1.5 miles for run, 500 meters for sprint, 3 miles for bike ride. Both value and unit must be specified together.
                     */
                    distanceValue?: number | null;
                    /**
                     * Distance unit for the distance value. Choose Meters for shorter distances (sprints, short runs), or Miles for longer distances (runs, bike rides, walks). Both value and unit must be specified together.
                     */
                    distanceUnit?: ('meters' | 'miles') | null;
                    /**
                     * Additional instructions or notes for this exercise (Max 500 characters)
                     */
                    notes?: string | null;
                    id?: string | null;
                  }[]
                | null;
              /**
               * Notes or instructions for this rest day. Only shown for rest days. (Max 500 characters)
               */
              restNotes?: string | null;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Check this box to make the program visible to product users. ⚠️ All required fields must be filled before publishing.
   */
  isPublished?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Product users are app users who authenticate via WebAuthN passkeys. They are completely separate from admin users.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "productUsers".
 */
export interface ProductUser {
  id: string;
  /**
   * Globally unique username for passkey authentication. Must be unique across all product users.
   */
  username: string;
  /**
   * WebAuthN passkey credentials for this user.
   */
  passkeyCredentials?:
    | {
        credentialID: string;
        publicKey: string;
        counter: number;
        deviceType?: string | null;
        backedUp?: boolean | null;
        transports?:
          | {
              transport?: string | null;
              id?: string | null;
            }[]
          | null;
        registrationDate: string;
        id?: string | null;
      }[]
    | null;
  /**
   * The program the user is currently enrolled in.
   */
  currentProgram?: (string | null) | Program;
  /**
   * The current milestone within the program.
   */
  currentMilestone?: (string | null) | Program;
  /**
   * The current day index within the milestone (1-based).
   */
  currentDay?: number | null;
  /**
   * Date of the last completed workout.
   */
  lastWorkoutDate?: string | null;
  /**
   * Total number of workouts completed by this user.
   */
  totalWorkoutsCompleted?: number | null;
  /**
   * Date of the last successful authentication.
   */
  lastAuthenticationDate?: string | null;
  /**
   * Temporary WebAuthN challenge for registration/authentication verification.
   */
  webauthnChallenge?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Exercise completion records track when users complete exercises with their performance data.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "exerciseCompletions".
 */
export interface ExerciseCompletion {
  id: string;
  /**
   * The product user who completed this exercise.
   */
  productUser: string | ProductUser;
  /**
   * The exercise that was completed.
   */
  exercise: string | Exercise;
  /**
   * The program in which this exercise was completed.
   */
  program: string | Program;
  /**
   * Index of the milestone within the program (0-based).
   */
  milestoneIndex: number;
  /**
   * Index of the day within the milestone (0-based).
   */
  dayIndex: number;
  /**
   * Number of sets completed for this exercise.
   */
  sets: number;
  /**
   * Number of repetitions completed per set.
   */
  reps: number;
  /**
   * Weight used for this exercise (optional, for weighted exercises).
   */
  weight?: number | null;
  /**
   * Time taken to complete the exercise in seconds (optional, for timed exercises).
   */
  time?: number | null;
  /**
   * Date and time when the exercise was completed.
   */
  completedAt: string;
  /**
   * Optional notes about the exercise completion (form, difficulty, etc.).
   */
  notes?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "exports".
 */
export interface Export {
  id: string;
  name?: string | null;
  format?: ('csv' | 'json') | null;
  limit?: number | null;
  page?: number | null;
  sort?: string | null;
  sortOrder?: ('asc' | 'desc') | null;
  drafts?: ('yes' | 'no') | null;
  selectionToUse?: ('currentSelection' | 'currentFilters' | 'all') | null;
  fields?: string[] | null;
  collectionSlug: string;
  where?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs".
 */
export interface PayloadJob {
  id: string;
  /**
   * Input data provided to the job
   */
  input?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  taskStatus?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  completedAt?: string | null;
  totalTried?: number | null;
  /**
   * If hasError is true this job will not be retried
   */
  hasError?: boolean | null;
  /**
   * If hasError is true, this is the error that caused it
   */
  error?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Task execution log
   */
  log?:
    | {
        executedAt: string;
        completedAt: string;
        taskSlug: 'inline' | 'createCollectionExport';
        taskID: string;
        input?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        output?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        state: 'failed' | 'succeeded';
        error?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        id?: string | null;
      }[]
    | null;
  taskSlug?: ('inline' | 'createCollectionExport') | null;
  queue?: string | null;
  waitUntil?: string | null;
  processing?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'exercises';
        value: string | Exercise;
      } | null)
    | ({
        relationTo: 'programs';
        value: string | Program;
      } | null)
    | ({
        relationTo: 'productUsers';
        value: string | ProductUser;
      } | null)
    | ({
        relationTo: 'exerciseCompletions';
        value: string | ExerciseCompletion;
      } | null)
    | ({
        relationTo: 'exports';
        value: string | Export;
      } | null)
    | ({
        relationTo: 'payload-jobs';
        value: string | PayloadJob;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "exercises_select".
 */
export interface ExercisesSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  videoUrl?: T;
  alternatives?: T;
  isPublished?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "programs_select".
 */
export interface ProgramsSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  objective?: T;
  milestones?:
    | T
    | {
        name?: T;
        theme?: T;
        objective?: T;
        days?:
          | T
          | {
              dayType?: T;
              isAmrap?: T;
              amrapDuration?: T;
              exercises?:
                | T
                | {
                    exercise?: T;
                    sets?: T;
                    reps?: T;
                    restPeriod?: T;
                    weight?: T;
                    durationValue?: T;
                    durationUnit?: T;
                    distanceValue?: T;
                    distanceUnit?: T;
                    notes?: T;
                    id?: T;
                  };
              restNotes?: T;
              id?: T;
            };
        id?: T;
      };
  isPublished?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "productUsers_select".
 */
export interface ProductUsersSelect<T extends boolean = true> {
  username?: T;
  passkeyCredentials?:
    | T
    | {
        credentialID?: T;
        publicKey?: T;
        counter?: T;
        deviceType?: T;
        backedUp?: T;
        transports?:
          | T
          | {
              transport?: T;
              id?: T;
            };
        registrationDate?: T;
        id?: T;
      };
  currentProgram?: T;
  currentMilestone?: T;
  currentDay?: T;
  lastWorkoutDate?: T;
  totalWorkoutsCompleted?: T;
  lastAuthenticationDate?: T;
  webauthnChallenge?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "exerciseCompletions_select".
 */
export interface ExerciseCompletionsSelect<T extends boolean = true> {
  productUser?: T;
  exercise?: T;
  program?: T;
  milestoneIndex?: T;
  dayIndex?: T;
  sets?: T;
  reps?: T;
  weight?: T;
  time?: T;
  completedAt?: T;
  notes?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "exports_select".
 */
export interface ExportsSelect<T extends boolean = true> {
  name?: T;
  format?: T;
  limit?: T;
  page?: T;
  sort?: T;
  sortOrder?: T;
  drafts?: T;
  selectionToUse?: T;
  fields?: T;
  collectionSlug?: T;
  where?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs_select".
 */
export interface PayloadJobsSelect<T extends boolean = true> {
  input?: T;
  taskStatus?: T;
  completedAt?: T;
  totalTried?: T;
  hasError?: T;
  error?: T;
  log?:
    | T
    | {
        executedAt?: T;
        completedAt?: T;
        taskSlug?: T;
        taskID?: T;
        input?: T;
        output?: T;
        state?: T;
        error?: T;
        id?: T;
      };
  taskSlug?: T;
  queue?: T;
  waitUntil?: T;
  processing?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskCreateCollectionExport".
 */
export interface TaskCreateCollectionExport {
  input: {
    name?: string | null;
    format?: ('csv' | 'json') | null;
    limit?: number | null;
    page?: number | null;
    sort?: string | null;
    sortOrder?: ('asc' | 'desc') | null;
    drafts?: ('yes' | 'no') | null;
    selectionToUse?: ('currentSelection' | 'currentFilters' | 'all') | null;
    fields?: string[] | null;
    collectionSlug: string;
    where?:
      | {
          [k: string]: unknown;
        }
      | unknown[]
      | string
      | number
      | boolean
      | null;
    user?: string | null;
    userCollection?: string | null;
    exportsCollection?: string | null;
  };
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}