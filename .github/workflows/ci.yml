name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  MONGODB_VERSION: '7.0'
  # Performance optimizations
  CI: true

jobs:
  # Code Quality Checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run code quality checks in parallel
        run: |
          npm run lint &
          npm run format:check &
          npm run type-check &
          wait

  # Unit and Integration Tests
  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_DATABASE: workout-app-test
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --health-start-period 10s

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Cache test coverage
        uses: actions/cache@v4
        id: coverage-cache
        with:
          path: |
            coverage/
          key: coverage-${{ runner.os }}-${{ hashFiles('package-lock.json') }}-${{ hashFiles('**/*.ts', '**/*.tsx', '**/*.js', '**/*.jsx') }}
          restore-keys: |
            coverage-${{ runner.os }}-${{ hashFiles('package-lock.json') }}-
            coverage-${{ runner.os }}-

      - name: Run tests with coverage
        run: npm run test:coverage
        env:
          DATABASE_URI: mongodb://localhost:27017/workout-app-test
          NODE_ENV: test

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # End-to-End Tests
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [quality, test]
    timeout-minutes: 30

    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_DATABASE: workout-app-e2e
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --health-start-period 10s

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            playwright-${{ runner.os }}-

      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: false

      - name: Cache Next.js build
        uses: actions/cache@v4
        id: nextjs-cache-e2e
        with:
          path: |
            .next/cache
          key: nextjs-e2e-${{ runner.os }}-${{ hashFiles('package-lock.json') }}-${{ hashFiles('**/*.ts', '**/*.tsx', '**/*.js', '**/*.jsx') }}
          restore-keys: |
            nextjs-e2e-${{ runner.os }}-${{ hashFiles('package-lock.json') }}-
            nextjs-e2e-${{ runner.os }}-

      - name: Build application
        run: npm run build
        env:
          DATABASE_URI: mongodb://localhost:27017/workout-app-e2e
          NODE_ENV: test
          NEXT_PUBLIC_APP_URL: http://localhost:3000
          JWT_SECRET: e2e-jwt-secret-placeholder
          PAYLOAD_SECRET: e2e-payload-secret-placeholder

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          DATABASE_URI: mongodb://localhost:27017/workout-app-e2e
          NODE_ENV: test
          NEXT_PUBLIC_APP_URL: http://localhost:3000
          JWT_SECRET: e2e-jwt-secret-placeholder
          PAYLOAD_SECRET: e2e-payload-secret-placeholder

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
          if-no-files-found: ignore

  # Build Verification
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [quality, test, e2e]
    timeout-minutes: 20

    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_DATABASE: workout-app-build
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --health-start-period 10s

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Cache Next.js build
        uses: actions/cache@v4
        id: nextjs-cache
        with:
          path: |
            .next/cache
          key: nextjs-${{ runner.os }}-${{ hashFiles('package-lock.json') }}-${{ hashFiles('**/*.ts', '**/*.tsx', '**/*.js', '**/*.jsx') }}
          restore-keys: |
            nextjs-${{ runner.os }}-${{ hashFiles('package-lock.json') }}-
            nextjs-${{ runner.os }}-

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          NODE_OPTIONS: '--max-old-space-size=4096'
          NEXT_PUBLIC_APP_URL: https://workout-app.example.com
          DATABASE_URI: mongodb://localhost:27017/workout-app-build
          JWT_SECRET: build-jwt-secret-placeholder
          PAYLOAD_SECRET: build-payload-secret-placeholder

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            .next/
            public/
            package.json
            package-lock.json
          retention-days: 7

  # Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=high --production

  # Commit Message Validation
  commitlint:
    name: Commit Message Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate commit messages
        run: npx commitlint --from ${{ github.event.pull_request.base.sha }} --to ${{ github.sha }} --verbose
